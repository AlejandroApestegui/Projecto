Index: app/src/main/java/models/Persona.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/models/Persona.java	(revision )
+++ app/src/main/java/models/Persona.java	(revision )
@@ -0,0 +1,27 @@
+package models;
+
+/**
+ * Created by apesteguia on 11/07/2017.
+ */
+
+public class Persona {
+
+    private String id;
+    private String descripcion;
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getDescripcion() {
+        return descripcion;
+    }
+
+    public void setDescripcion(String descripcion) {
+        this.descripcion = descripcion;
+    }
+}
Index: app/src/main/java/dao/ActivoDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/dao/ActivoDao.java	(date 1499719908000)
+++ app/src/main/java/dao/ActivoDao.java	(revision )
@@ -1,5 +1,6 @@
 package dao;
 
+import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -56,6 +57,23 @@
 
         return new Activo();
 
+    }
+
+
+    public void actualizar(Activo activo) {
+
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(COL_CENTROCOSTOS, activo.getCentroCostos());
+        contentValues.put(COL_DESCRIPCION, activo.getDescripcion());
+        contentValues.put(COL_ESTADO, activo.getEstado());
+        contentValues.put(COL_FECHACOMPRA, activo.getFechaCompra());
+        contentValues.put(COL_MARCA, activo.getMarca());
+        contentValues.put(COL_PESO, activo.getPeso());
+        contentValues.put(COL_UBICACION, activo.getUbicacion());
+        contentValues.put(COL_PROVEEDOR, activo.getProveedor());
+        contentValues.put(COL_RESPONSABLE, activo.getResponsable());
+
+        db.update(TABLA, contentValues, COL_ID + "=?", new String[]{activo.getId()});
     }
 
     private Activo cursorToActivo(Cursor cursor) {
Index: app/src/main/java/com/cibertec/taurus/ActivoMantenimiento.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/cibertec/taurus/ActivoMantenimiento.java	(date 1499719908000)
+++ app/src/main/java/com/cibertec/taurus/ActivoMantenimiento.java	(revision )
@@ -1,7 +1,8 @@
 package com.cibertec.taurus;
 
-import android.support.v7.app.AppCompatActivity;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.text.TextUtils;
 import android.view.View;
 import android.widget.EditText;
 import android.widget.Spinner;
@@ -14,17 +15,102 @@
 
 public class ActivoMantenimiento extends AppCompatActivity {
 
-    private EditText etId, etDescripcion, etPeso, etUbicacion, etResponsable, etProveedor, etFecha;
+    private EditText etId;
+    private EditText etDescripcion;
+    private EditText etPeso, etUbicacion, etResponsable, etProveedor, etFecha;
     private Spinner spCCostos, spTipo, spMarca, spEstado;
     private MiscelaneoAdapter costosAdapter, tipoAdapter, marcaAdapter, estadoAdapter;
 
+    private Activo activo;
+
+    private View.OnClickListener btnSeleccionarResponsableOnClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+
+        }
+    };
+    private View.OnClickListener btnSeleccionarProveedorOnClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+
+        }
+    };
+    private View.OnClickListener btnSeleccionarFechaOnClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+
+        }
+    };
     private View.OnClickListener btnGuardarOnClickListener = new View.OnClickListener() {
         @Override
         public void onClick(View v) {
 
+            if (!validar()) {
+                return;
-        }
+            }
+            activo.setCentroCostos(((Miscelaneo) (spCCostos.getSelectedItem())).getId());
+            activo.setTipo(((Miscelaneo) (spTipo.getSelectedItem())).getId());
+            activo.setMarca(((Miscelaneo) (spMarca.getSelectedItem())).getId());
+            activo.setEstado(((Miscelaneo) (spEstado.getSelectedItem())).getId());
+            activo.setDescripcion(etDescripcion.getText().toString().trim());
+            activo.setUbicacion(etUbicacion.getText().toString().trim());
+            activo.setPeso(Double.parseDouble(etPeso.getText().toString().trim()));
+
+            new ActivoDao(ActivoMantenimiento.this).actualizar(activo);
+
+        }
     };
 
+    private boolean validar() {
+        String mensaje = "Ingresar : ";
+        boolean valida = true;
+        if (TextUtils.isEmpty(etDescripcion.getText())) {
+            mensaje += " descripcion,";
+            valida = false;
+        }
+        if (((Miscelaneo) (spCCostos.getSelectedItem())).getId() == 0) {
+            mensaje += " centro de costos,";
+            valida = false;
+        }
+        if (((Miscelaneo) (spTipo.getSelectedItem())).getId() == 0) {
+            mensaje += " tipo,";
+            valida = false;
+        }
+        if (((Miscelaneo) (spMarca.getSelectedItem())).getId() == 0) {
+            mensaje += " marca,";
+            valida = false;
+        }
+        if (((Miscelaneo) (spEstado.getSelectedItem())).getId() == 0) {
+            mensaje += " estado,";
+            valida = false;
+        }
+        if (TextUtils.isEmpty(etPeso.getText())) {
+            mensaje += " peso,";
+            valida = false;
+        }
+        if (TextUtils.isEmpty(etUbicacion.getText())) {
+            mensaje += " ubicaci√≥n,";
+            valida = false;
+        }
+        if (activo.getResponsable().trim().equals("")) {
+            mensaje += " responsable,";
+            valida = false;
+        }
+        if (activo.getProveedor().trim().equals("")) {
+            mensaje += " proveedor,";
+            valida = false;
+        }
+        if (TextUtils.isEmpty(etFecha.getText())) {
+            mensaje += " fecha";
+            valida = false;
+        }
+
+        if (!valida) {
+            Utils.makeToast(this, mensaje.substring(0, mensaje.length() - 1));
+        }
+        return valida;
+    }
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -39,7 +125,7 @@
 
     private void cargarDatos() {
 
-        Activo activo = new ActivoDao(ActivoMantenimiento.this).buscarPorId(getIntent().getStringExtra("id"));
+        activo = new ActivoDao(ActivoMantenimiento.this).buscarPorId(getIntent().getStringExtra("id"));
 
         etId.setText(activo.getId());
         etDescripcion.setText(activo.getDescripcion());
@@ -57,8 +143,8 @@
     }
 
     private void seleccionarSpinner(Spinner sp, Integer centroCostos) {
-        for(int i = 0;i<sp.getAdapter().getCount();i++){
+        for (int i = 0; i < sp.getAdapter().getCount(); i++) {
-            if(((Miscelaneo)(sp.getAdapter().getItem(i))).getId().intValue()==centroCostos.intValue()){
+            if (((Miscelaneo) (sp.getAdapter().getItem(i))).getId().intValue() == centroCostos.intValue()) {
                 sp.setSelection(i);
             }
         }
@@ -106,5 +192,8 @@
         spEstado = (Spinner) findViewById(R.id.spEstado);
 
         findViewById(R.id.btnGuardar).setOnClickListener(btnGuardarOnClickListener);
+        findViewById(R.id.btnSeleccionarFecha).setOnClickListener(btnSeleccionarFechaOnClickListener);
+        findViewById(R.id.btnSeleccionarProveedor).setOnClickListener(btnSeleccionarProveedorOnClickListener);
+        findViewById(R.id.btnSeleccionarResponsable).setOnClickListener(btnSeleccionarResponsableOnClickListener);
     }
 }
